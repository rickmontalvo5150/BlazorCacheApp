@page "/cache-demo"
@using BlazorCacheApp.Services.CacheService
@using BlazorCacheApp.Services.DemoService
@inject ICacheService CacheService
@inject WeatherForecastService WeatherService
@implements IDisposable

<PageTitle>Cache Demo</PageTitle>

<h1>Cache Demo</h1>

<p>This page demonstrates the caching functionality using a sample weather forecast API.</p>

<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h3>Weather Forecast</h3>
            </div>
            <div class="card-body">
                @if (_forecasts == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <p>
                        <strong>API Call Count: @WeatherService.ApiCallCount</strong>
                        <span class="ms-2 text-muted">
                            (Notice this doesn't increase when loading from cache)
                        </span>
                    </p>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Temp. (C)</th>
                                <th>Temp. (F)</th>
                                <th>Summary</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var forecast in _forecasts)
                            {
                                <tr>
                                    <td>@forecast.Date.ToShortDateString()</td>
                                    <td>@forecast.TemperatureC</td>
                                    <td>@forecast.TemperatureF</td>
                                    <td>@forecast.Summary</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="LoadForecast">Refresh Data</button>
                <button class="btn btn-secondary ms-2" @onclick="ClearCacheAndReload">Clear Weather Key & Reload</button>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h3>Cache Controls</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="cacheKey" class="form-label">Cache Key:</label>
                    <input id="cacheKey" class="form-control" @bind="_customKey" />
                </div>
                <div class="mb-3">
                    <label for="cacheValue" class="form-label">Cache Value:</label>
                    <input id="cacheValue" class="form-control" @bind="_customValue" />
                </div>
                <div class="mb-3">
                    <label for="expiration" class="form-label">Expiration (seconds):</label>
                    <input id="expiration" type="number" class="form-control" @bind="_expirationSeconds" />
                </div>
                <div class="mb-3">
                    <button class="btn btn-primary" @onclick="SetCustomCache">Set Custom Value</button>
                    <button class="btn btn-secondary ms-2" @onclick="GetCustomCache">Get Custom Value</button>
                    <button class="btn btn-danger ms-2" @onclick="RemoveCustomCache">Remove</button>
                </div>
                <div class="alert @(string.IsNullOrEmpty(_customResultMessage) ? "d-none" : _customResultClass)">
                    @_customResultMessage
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h3>Cache Statistics</h3>
                <button class="btn btn-sm btn-outline-secondary float-end" @onclick="RefreshStatistics">
                    Refresh
                </button>
            </div>
            <div class="card-body">
                @if (_cacheStats == null)
                {
                    <p><em>Loading statistics...</em></p>
                }
                else
                {
                    <dl class="row">
                        <dt class="col-sm-6">Total Items:</dt>
                        <dd class="col-sm-6">@_cacheStats.TotalItems</dd>

                        <dt class="col-sm-6">Expired Items:</dt>
                        <dd class="col-sm-6">@_cacheStats.ExpiredItems</dd>

                        <dt class="col-sm-6">Estimated Size:</dt>
                        <dd class="col-sm-6">@FormatBytes(_cacheStats.EstimatedSizeBytes)</dd>

                        <dt class="col-sm-6">Last Cleanup:</dt>
                        <dd class="col-sm-6">@_cacheStats.LastCleanupTime.ToLocalTime().ToString("g")</dd>
                    </dl>

                    <h4 class="mt-4">Cache Keys</h4>
                    @if (_cacheKeys?.Any() != true)
                    {
                        <p><em>No items in cache</em></p>
                    }
                    else
                    {
                        <ul class="list-group">
                            @foreach (var key in _cacheKeys)
                            {
                                <li class="list-group-item">@key</li>
                            }
                        </ul>
                    }
                }
            </div>
            <div class="card-footer">
                <button class="btn btn-warning" @onclick="CleanupCache">Run Cleanup</button>
                <button class="btn btn-danger ms-2" @onclick="ClearAllCache">Clear All Cache</button>
            </div>
        </div>
    </div>
</div>

@code {
    private WeatherForecast[]? _forecasts;
    private CacheStatistics? _cacheStats;
    private IEnumerable<string>? _cacheKeys;
    
    // For custom cache demo
    private string _customKey = "demo-key";
    private string _customValue = "This is a test value";
    private int _expirationSeconds = 30;
    private string? _customResultMessage;
    private string _customResultClass = "alert-info";
    
    private CancellationTokenSource? _removeCustomCacheCts;
    private CancellationTokenSource? _clearAllCacheCts;
    private CancellationTokenSource? _cleanupCacheCts;
    private CancellationTokenSource? _initCts;
    private CancellationTokenSource? _clearAndReloadCts;
    private CancellationTokenSource? _refreshStatsCts;
    
    // Cache key for weather data
    private const string WeatherCacheKey = "weather-forecast";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cts = GetNewTokenSource(ref _initCts, "initialization");
        
            // Run both operations in parallel
            var forecastTask = LoadForecast();
            var statsTask = RefreshStatistics();
        
            var combinedTask = Task.WhenAll(forecastTask, statsTask);
        
            // Use token for timeout - though we can't cancel the individual operations
            await combinedTask.WaitAsync(cts.Token);
        }
        catch (OperationCanceledException)
        {
            System.Diagnostics.Debug.WriteLine("Initialization was canceled");
            _customResultMessage = "Page initialization was canceled or timeded out.";
            _customResultClass = "alert-warning";
        }
        catch (Exception ex)
        {
            _customResultMessage = $"Error initializing page: {ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Error in OnInitializedAsync: {ex}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private static CancellationTokenSource GetNewTokenSource(ref CancellationTokenSource? currentCts, string operationName)
    {
        // Cancel any previous operation
        if (currentCts != null)
        {
            try
            {
                currentCts.Cancel(); // Synchronous cancel instead of async
            }
            catch (Exception ex)
            {
                // Ignore cancellation errors but log them
                System.Diagnostics.Debug.WriteLine($"Error canceling {operationName} operation: {ex.Message}");
            }
            currentCts.Dispose();
        }
    
        currentCts = new CancellationTokenSource();
        return currentCts;
    }
    
    private async Task LoadForecast()
    {
        try
        {
            // Try to get from cache first
            _forecasts = await CacheService.GetAsync<WeatherForecast[]>(WeatherCacheKey);
        
            // If not in cache or expired, load from API
            if (_forecasts == null)
            {
                _forecasts = await WeatherService.GetForecastAsync(DateTime.Now);
            
                // Cache with 10 second expiration
                await CacheService.SetAsync(WeatherCacheKey, _forecasts, TimeSpan.FromSeconds(10));
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in LoadForecast: {ex}");
            _customResultMessage = "Error loading forecast data";
            _customResultClass = "alert-danger";
        
            // Make sure we don't have partially loaded data
            _forecasts = null;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task ClearCacheAndReload()
    {
        try
        {
            var cts = GetNewTokenSource(ref _clearAndReloadCts, "clear and reload");
        
            // Set loading state
            _customResultMessage = "Clearing cache and reloading...";
            _customResultClass = "alert-info";
        
            // First remove from cache
            var removeTask = CacheService.RemoveAsync(WeatherCacheKey);
        
            // Wait for removal with timeout/cancellation
            await removeTask.WaitAsync(cts.Token);
        
            // Then load forecast
            await LoadForecast();
        }
        catch (OperationCanceledException)
        {
            System.Diagnostics.Debug.WriteLine("Clear and reload operation was canceled");
            _customResultMessage = "Clearing cache operation canceled.";
            _customResultClass = "alert-warning";
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in ClearCacheAndReload: {ex}");
            _customResultMessage = "Error clearing and reloading cache";
            _customResultClass = "alert-danger";
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task RefreshStatistics()
    {
        try
        {
            var cts = GetNewTokenSource(ref _refreshStatsCts, "refresh statistics");
        
            // Run both operations in parallel
            var statsTask = CacheService.GetStatisticsAsync();
            var keysTask = CacheService.GetAllKeysAsync();
        
            // Wait for both tasks with cancellation support
            await Task.WhenAll(statsTask, keysTask).WaitAsync(cts.Token);
        
            // Only update the UI if the operation wasn't cancelled
            if (!cts.IsCancellationRequested)
            {
                _cacheStats = await statsTask;
                _cacheKeys = await keysTask;
            }
        }
        catch (OperationCanceledException)
        {
            System.Diagnostics.Debug.WriteLine("Statistics refresh was canceled");
            _customResultMessage = "Statistics refresh was canceled.";
            _customResultClass = "alert-warning";
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error refreshing statistics: {ex.Message}");
            _customResultMessage = "Error refreshing statistics";
            _customResultClass = "alert-danger";
        }
    }
    
    private async Task SetCustomCache()
    {
        try
        {
            TimeSpan? expiration = _expirationSeconds > 0 
                ? TimeSpan.FromSeconds(_expirationSeconds)
                : null;
                
            await CacheService.SetAsync(_customKey, _customValue, expiration);
            
            _customResultMessage = "Value cached successfully! " + 
                (expiration.HasValue ? $"Expires in {_expirationSeconds} seconds." : "Never expires.");
            _customResultClass = "alert-success";
            
            await RefreshStatistics();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in SetCustomCache: {ex.Message}");
            _customResultMessage = "Error setting custom cache";
            _customResultClass = "alert-danger";
        }
    }
    
    private async Task GetCustomCache()
    {
        try
        {
            var value = await CacheService.GetAsync<string>(_customKey);
            
            if (value != null)
            {
                _customResultMessage = $"Retrieved value: {value}";
                _customValue = value;
            }
            else
            {
                _customResultMessage = "Key not found in cache or expired.";
            }
            
            _customResultClass = "alert-info";
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in GetCustomCache:  {ex.Message}");
            _customResultMessage = "Error in getting customer cache";
            _customResultClass = "alert-danger";
        }
    }
    
    private async Task RemoveCustomCache()
    {
        try
        {
            var cts = GetNewTokenSource(ref _removeCustomCacheCts, "remove custom cache");
        
            // Set loading state
            _customResultMessage = "Removing from cache...";
            _customResultClass = "alert-info";
            StateHasChanged();
        
            // Remove from cache
            var removeTask = CacheService.RemoveAsync(_customKey);
            await removeTask.WaitAsync(cts.Token);
        
            // Update UI state
            _customResultMessage = $"Key '{_customKey}' removed from cache.";
            _customResultClass = "alert-warning";
        
            // Refresh statistics
            var statsTask = RefreshStatistics();
            await statsTask.WaitAsync(cts.Token);
        }
        catch (OperationCanceledException)
        {
            System.Diagnostics.Debug.WriteLine("Removing from custom cache canceled");
            _customResultMessage = "Removing from custom cache canceled";
            _customResultClass = "alert-warning";
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in RemoveCustomCache:  {ex.Message}");
            _customResultMessage = "Error removing from custom cache";
            _customResultClass = "alert-danger";
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task CleanupCache()
    {
        try
        {
            // Cancel any previous operation
            if (_cleanupCacheCts != null)
            {
                try
                {
                    await _cleanupCacheCts.CancelAsync();
                }
                catch
                {
                    // Ignore cancellation errors
                }
                _cleanupCacheCts.Dispose();
            }
        
            _cleanupCacheCts = new CancellationTokenSource();
            var token = _cleanupCacheCts.Token;
        
            // Set loading state
            _customResultMessage = "Cleaning up expired cache items...";
            _customResultClass = "alert-info";
        
            // Clean expired items
            var cleanupTask = CacheService.CleanExpiredItemsAsync();
            await cleanupTask.WaitAsync(token);
        
            // Update UI state
            _customResultMessage = "Cache cleanup completed.";
            _customResultClass = "alert-success";
        
            // Refresh statistics
            var statsTask = RefreshStatistics();
            await statsTask.WaitAsync(token);
        }
        catch (OperationCanceledException)
        {
            System.Diagnostics.Debug.WriteLine("Cleanup operation was canceled");
            _customResultMessage = "Cleanup operation was canceled";
            _customResultClass = "alert-warning";
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in CleanupCache: {ex}");
            _customResultMessage = "Error during cache cleanup";
            _customResultClass = "alert-danger";
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task ClearAllCache()
    {
        try
        {
            // Cancel any previous operation
            if (_clearAllCacheCts != null)
            {
                try
                {
                    await _clearAllCacheCts.CancelAsync();
                }
                catch
                {
                    // Ignore cancellation errors
                }
                _clearAllCacheCts.Dispose();
            }
        
            _clearAllCacheCts = new CancellationTokenSource();
            var token = _clearAllCacheCts.Token;
        
            // Set loading state
            _customResultMessage = "Clearing all cache items...";
            _customResultClass = "alert-info";
        
            // Clear all cache
            var clearTask = CacheService.ClearAsync();
            await clearTask.WaitAsync(token);
        
            // Update UI state
            _customResultMessage = "All cache items cleared.";
            _customResultClass = "alert-warning";
        
            // Refresh statistics
            var statsTask = RefreshStatistics();
            await statsTask.WaitAsync(token);
        }
        catch (OperationCanceledException)
        {
            System.Diagnostics.Debug.WriteLine("Clear all cache canceled");
            _customResultMessage = "Clear all cache canceled.";
            _customResultClass = "alert-warning";
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in ClearAllCache: {ex}");
            _customResultMessage = $"Error clearing cache: {ex.Message}";
            _customResultClass = "alert-danger";
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private static string FormatBytes(long bytes)
    {
        string[] suffixes = ["B", "KB", "MB", "GB"];
        var counter = 0;
        decimal number = bytes;
        
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        
        return $"{number:n1} {suffixes[counter]}";
    }
    
    public void Dispose()
    {
        SafeDispose(ref _initCts, "initialization");
        SafeDispose(ref _clearAndReloadCts, "clear and reload");
        SafeDispose(ref _removeCustomCacheCts, "remove custom cache");
        SafeDispose(ref _cleanupCacheCts, "cleanup cache");
        SafeDispose(ref _clearAllCacheCts, "clear all cache");
        SafeDispose(ref _refreshStatsCts, "refresh statistics");
    }

    static void SafeDispose(ref CancellationTokenSource? cts, string name)
    {
        try
        {
            cts?.Cancel();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error canceling {name}: {ex.Message}");
        }
        finally
        {
            cts?.Dispose();
            cts = null;
        }
    }
}